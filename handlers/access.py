from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN_IDS, CHANNEL_ID, CHANNEL_URL, ADMIN_USERNAME, EXERCISE_CATEGORIES
from database import db
import logging

router = Router()

async def access_middleware(message: Message, bot: Bot) -> bool:
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤)
    if db.is_user_allowed(user_id):
        await show_exercises_menu(message)
        return True
        
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        is_subscribed = member.status not in ['left', 'kicked', 'banned']
        
        if not is_subscribed:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                            url=CHANNEL_URL
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                            callback_data="check_subscription"
                        )
                    ]
                ]
            )
            
            await message.answer(
                "‚ùóÔ∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n"
                f"1. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_URL}\n"
                "2. –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏",
                reply_markup=keyboard
            )
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        pending = db.execute_query(
            'SELECT 1 FROM pending_users WHERE user_id = ?', 
            (user_id,)
        ).fetchone()
        
        if pending:
            await message.answer(
                "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
            return False
            
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìù –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø",
                        callback_data="request_access"
                    )
                ]
            ]
        )
        
        await message.answer(
            "‚ùóÔ∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
            reply_markup=keyboard
        )
        return False
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞")
        return False

@router.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    try:
        member = await callback.bot.get_chat_member(CHANNEL_ID, user_id)
        is_subscribed = member.status not in ['left', 'kicked', 'banned']
        
        if is_subscribed:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
            if db.is_user_allowed(user_id):
                await show_exercises_menu(callback.message)
                return
                
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìù –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø",
                            callback_data="request_access"
                        )
                    ]
                ]
            )
            
            await callback.message.edit_text(
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                "‚è≥ –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
                reply_markup=keyboard
            )
        else:
            await callback.answer(
                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                show_alert=True
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏",
            show_alert=True
        )

@router.message(lambda m: m.text == "üéØ –ú–æ–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
async def show_exercises(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    try:
        member = await message.bot.get_chat_member(CHANNEL_ID, user_id)
        is_subscribed = member.status not in ['left', 'kicked', 'banned']
        
        if not is_subscribed:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                            url=CHANNEL_URL
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                            callback_data="check_subscription"
                        )
                    ]
                ]
            )
            
            await message.answer(
                "‚ùóÔ∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n"
                f"1. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_URL}\n"
                "2. –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏",
                reply_markup=keyboard
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞
        if not db.is_user_allowed(user_id):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å
            pending = db.execute_query(
                'SELECT 1 FROM pending_users WHERE user_id = ?', 
                (user_id,)
            ).fetchone()
            
            if pending:
                await message.answer(
                    "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return
                
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìù –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø",
                            callback_data="request_access"
                        )
                    ]
                ]
            )
            
            await message.answer(
                "‚ùóÔ∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
                reply_markup=keyboard
            )
            return
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        await show_exercises_menu(message)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞") 

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
async def show_exercises_menu(message: Message):
    keyboard = []
    for code, name in EXERCISE_CATEGORIES.items():
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚û§ {name}",
                callback_data=f"ex_{code}"
            )
        ])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(
        "<b>üéØ –í–∏–¥–µ–æ-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</b>\n\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:</i>\n\n"
        "‚Ä¢ –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ—Ö–Ω–∏–∫–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        reply_markup=markup,
        parse_mode="HTML"
    ) 

@router.callback_query(lambda c: c.data == "request_access")
async def process_access_request(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å
        pending = db.execute_query(
            'SELECT 1 FROM pending_users WHERE user_id = ?', 
            (user_id,)
        ).fetchone()
        
        if pending:
            await callback.answer(
                "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
                show_alert=True
            )
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
        db.execute_query(
            'INSERT INTO pending_users (user_id, username, full_name) VALUES (?, ?, ?)',
            (user_id, username, full_name)
        )
        db.conn.commit()
        
        await callback.answer(
            "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            show_alert=True
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É",
                                callback_data=f"view_request_{user_id}"
                            )
                        ]
                    ]
                )
                
                await callback.bot.send_message(
                    admin_id,
                    f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø!\n\n"
                    f"–û—Ç: {full_name}\n"
                    f"Username: @{username or '–Ω–µ—Ç'}\n"
                    f"ID: {user_id}",
                    reply_markup=keyboard
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏",
            show_alert=True
        ) 