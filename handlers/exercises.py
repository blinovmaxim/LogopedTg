from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime
from keyboards.client_kb import get_main_keyboard
from states.exercise_states import ExerciseStates
from config import EXERCISE_CATEGORIES, EXERCISE_SEARCH_QUERIES
from utils.youtube import search_youtube_video

router = Router()

# –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
@router.message(F.text == "üéØ –ú–æ–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
async def show_exercise_categories(message: Message):
    keyboard = []
    for code, name in EXERCISE_CATEGORIES.items():
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"‚û§ {name}",
                callback_data=f"ex_{code}"
            )
        ])
    
    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(
        "<b>üéØ –í–∏–¥–µ–æ-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</b>\n\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:</i>\n\n"
        "‚Ä¢ –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ—Ö–Ω–∏–∫–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n",
        reply_markup=markup,
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data.startswith('ex_'))
async def process_exercise_category(callback: CallbackQuery):
    category_code = callback.data.replace('ex_', '')
    if category_code in EXERCISE_CATEGORIES:
        category_name = EXERCISE_CATEGORIES[category_code]
        
        videos = search_youtube_video(EXERCISE_SEARCH_QUERIES[category_code], max_results=5, force_update=True)
        
        if videos:
            keyboard = []
            for i, video in enumerate(videos, 1):
                title = video['title']
                if len(title) > 40:
                    title = title[:37] + "..."
                
                keyboard.append([
                    types.InlineKeyboardButton(
                        text=f"üì∫ {title}",
                        callback_data=f"video:{category_code}:{i-1}"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard.extend([
                [
                    types.InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                        callback_data=f"refresh:{category_code}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                        callback_data="back_to_categories"
                    )
                ]
            ])
            
            markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            if not hasattr(callback.bot, 'videos'):
                callback.bot.videos = {}
            callback.bot.videos[category_code] = videos
            
            await callback.message.edit_text(
                f"<b>üéØ {category_name}</b>\n\n"
                f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</i>\n",
                reply_markup=markup,
                parse_mode="HTML"
            )

@router.callback_query(lambda c: c.data.startswith('refresh:'))
async def refresh_videos(callback: CallbackQuery):
    try:
        _, category_code = callback.data.split(':')
        if category_code in EXERCISE_CATEGORIES:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            videos = search_youtube_video(
                EXERCISE_SEARCH_QUERIES[category_code], 
                max_results=5, 
                force_update=True
            )
            
            if videos:
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                callback.data = f"ex_{category_code}"
                await process_exercise_category(callback)
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

@router.callback_query(lambda c: c.data.startswith('video:'))  # –ò–∑–º–µ–Ω–∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞ :
async def confirm_watch_video(callback: CallbackQuery):
    try:
        _, category_code, video_idx = callback.data.split(':')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º : –≤–º–µ—Å—Ç–æ _
        video_idx = int(video_idx)
        
        videos = getattr(callback.bot, 'videos', {}).get(category_code, [])
        
        if videos and video_idx < len(videos):
            video = videos[video_idx]
            keyboard = [
                [
                    types.InlineKeyboardButton(
                        text="‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ",
                        url=video['url']
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                        callback_data=f"ex_{category_code}"
                    )
                ]
            ]
            
            markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await callback.message.edit_text(
                f"<b>üì∫ {video['title']}</b>\n\n"
                "–ù–∞–∂–º–∏—Ç–µ <b>‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä\n\n"
                "<i>üí° –°–æ–≤–µ—Ç: –í—ã–ø–æ–ª–Ω—è–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –≤–∏–¥–µ–æ</i>",
                reply_markup=markup,
                parse_mode="HTML"
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery):
    await show_exercise_categories(callback.message)
    await callback.answer()