from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from keyboards.client_kb import get_main_keyboard
from states.exercise_states import ExerciseStates
from config import EXERCISE_CATEGORIES
from utils.youtube import search_youtube_video
from datetime import datetime, timedelta
import json
import os

router = Router()
CACHE_FILE = 'cache/youtube_cache.json'
CACHE_DURATION = timedelta(hours=24)  # –ö—ç—à —Ö—Ä–∞–Ω–∏—Ç—Å—è 24 —á–∞—Å–∞

def load_cache():
    if not os.path.exists('cache'):
        os.makedirs('cache')
    if os.path.exists(CACHE_FILE):
        with open(CACHE_FILE, 'r', encoding='utf-8') as f:
            cache = json.load(f)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫—ç—à–∞
            if datetime.fromisoformat(cache['timestamp']) + CACHE_DURATION > datetime.now():
                return cache['data']
    return {}

def save_cache(data):
    cache = {
        'timestamp': datetime.now().isoformat(),
        'data': data
    }
    with open(CACHE_FILE, 'w', encoding='utf-8') as f:
        json.dump(cache, f, ensure_ascii=False)

@router.message(F.text == "üéØ –ú–æ–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
async def show_exercise_categories(message: Message):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=name,
            callback_data=f"category_{code}"
        )] for code, name in EXERCISE_CATEGORIES.items()
    ])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data.startswith('category_'))
async def show_category_exercises(callback: CallbackQuery, state: FSMContext, force_update=False):
    category_code = callback.data.replace('category_', '')
    category_name = EXERCISE_CATEGORIES[category_code]
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
    await callback.message.answer(f"üîç –ò—â—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è {category_name}...")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    search_query = category_code  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    videos = search_youtube_video(search_query)
    
    if not videos:
        await callback.message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}")
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –≤–∏–¥–µ–æ
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=f"üì∫ {video['title'][:40]}...",
            callback_data=f"video_{video['video_id']}"
        )] for video in videos
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.inline_keyboard.extend([
        [types.InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            callback_data=f"refresh_{category_code}"
        )],
        [types.InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="back_to_categories"
        )]
    ])
    
    await callback.message.answer(
        f"üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è {category_name}:\n"
        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )
    await state.update_data(videos={v['video_id']: v for v in videos})
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('refresh_'))
async def refresh_videos(callback: CallbackQuery, state: FSMContext):
    category_code = callback.data.replace('refresh_', '')
    await callback.message.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ...")
    await show_category_exercises(callback, state, force_update=True)

@router.callback_query(lambda c: c.data.startswith('video_'))
async def show_video(callback: CallbackQuery, state: FSMContext):
    video_id = callback.data.replace('video_', '')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ
    data = await state.get_data()
    video = data['videos'].get(video_id)
    
    if not video:
        await callback.message.answer("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text="‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ YouTube",
            url=f"https://www.youtube.com/watch?v={video_id}"
        )],
        [types.InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data=callback.message.reply_markup.inline_keyboard[-1][0].callback_data
        )]
    ])
    
    await callback.message.answer(
        f"üì∫ {video['title']}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –Ω–∞ YouTube:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery):
    await show_exercise_categories(callback.message)
    await callback.answer() 