from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import time

from database import db
from config import ADMIN_IDS
from handlers.user import show_user_tasks

router = Router()

class TaskStates(StatesGroup):
    waiting_for_task_name = State()
    waiting_for_description = State()

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("my_tasks"))
async def show_my_tasks(message: Message):
    user_id = message.from_user.id
    
    tasks = db.execute_query('''
        SELECT task_id, task_name, description 
        FROM tasks 
        WHERE user_id = ?
        ORDER BY created_at DESC
    ''', (user_id,)).fetchall()
    
    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ: /new_task")
        return
    
    text = "üìù –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n\n"
    keyboard = []
    
    for task_id, name, description in tasks:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        total_time = db.execute_query('''
            SELECT SUM(duration) 
            FROM task_timers 
            WHERE task_id = ?
        ''', (task_id,)).fetchone()[0] or 0
        
        hours = total_time // 3600
        minutes = (total_time % 3600) // 60
        
        text += f"üìå {name}\n"
        text += f"üìù {description}\n"
        text += f"‚è± –ó–∞—Ç—Ä–∞—á–µ–Ω–æ: {hours}—á {minutes}–º–∏–Ω\n\n"
        
        keyboard.append([
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç",
                callback_data=f"start_task_{task_id}"
            ),
            InlineKeyboardButton(
                text="‚èπ –°—Ç–æ–ø",
                callback_data=f"stop_task_{task_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚ûï –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
            callback_data="new_task"
        )
    ])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(text, reply_markup=markup)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.message(Command("new_task"))
async def create_task(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(TaskStates.waiting_for_task_name)

@router.message(TaskStates.waiting_for_task_name)
async def process_task_name(message: Message, state: FSMContext):
    await state.update_data(task_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(TaskStates.waiting_for_description)

@router.message(TaskStates.waiting_for_description)
async def process_task_description(message: Message, state: FSMContext):
    user_data = await state.get_data()
    task_name = user_data['task_name']
    
    db.execute_query('''
        INSERT INTO tasks (user_id, task_name, description)
        VALUES (?, ?, ?)
    ''', (message.from_user.id, task_name, message.text))
    
    await message.answer(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        f"üìå {task_name}\n"
        f"üìù {message.text}"
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–π–º–µ—Ä–∞
@router.callback_query(lambda c: c.data.startswith("start_task_"))
async def start_timer(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
    active_timer = db.execute_query('''
        SELECT timer_id FROM task_timers 
        WHERE task_id = ? AND end_time IS NULL
    ''', (task_id,)).fetchone()
    
    if active_timer:
        await callback.answer("‚ö†Ô∏è –¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    db.execute_query('''
        INSERT INTO task_timers (task_id, user_id, start_time)
        VALUES (?, ?, datetime('now'))
    ''', (task_id, callback.from_user.id))
    
    await callback.answer("‚è± –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!")

@router.callback_query(lambda c: c.data.startswith("stop_task_"))
async def stop_timer(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[2])
    
    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä
    timer = db.execute_query('''
        SELECT timer_id, start_time 
        FROM task_timers 
        WHERE task_id = ? AND end_time IS NULL
    ''', (task_id,)).fetchone()
    
    if not timer:
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞!", show_alert=True)
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    db.stop_timer(task_id, callback.from_user.id)
    await callback.answer("‚è± –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
    await show_user_tasks(callback.message)

@router.callback_query(lambda c: c.data.startswith("start_assigned_"))
async def start_assigned_timer(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
    active_timer = db.execute_query('''
        SELECT timer_id FROM task_timers 
        WHERE task_id = ? AND end_time IS NULL
    ''', (task_id,)).fetchone()
    
    if active_timer:
        await callback.answer("‚ö†Ô∏è –¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    db.execute_query('''
        INSERT INTO task_timers (task_id, user_id, start_time)
        VALUES (?, ?, datetime('now'))
    ''', (task_id, callback.from_user.id))
    
    await callback.answer("‚è± –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!")

@router.callback_query(lambda c: c.data.startswith("stop_assigned_"))
async def stop_assigned_timer(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[2])
    
    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä
    timer = db.execute_query('''
        SELECT timer_id, start_time 
        FROM task_timers 
        WHERE task_id = ? AND end_time IS NULL
    ''', (task_id,)).fetchone()
    
    if not timer:
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞!", show_alert=True)
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ –æ—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
    db.stop_timer(task_id, callback.from_user.id)
    db.complete_assigned_task(task_id, callback.from_user.id)
    
    await callback.answer("‚è± –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    await show_user_tasks(callback.message)

@router.message(lambda m: m.text == "üìù –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è")
async def show_user_tasks(message: Message):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω—ã–µ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    own_tasks = db.get_user_tasks(user_id)
    assigned_tasks = db.get_assigned_tasks(user_id)
    
    if not own_tasks and not assigned_tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")
        return
        
    text = ""
    keyboard = []
    
    if assigned_tasks:
        text += "üìã –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
        for task in assigned_tasks:
            task_id, name, description, created_at, completed = task
            status = "‚úÖ" if completed else "‚è≥"
            text += f"{status} {name}\n"
            text += f"üìù {description}\n\n"
            
            if not completed:
                keyboard.append([
                    InlineKeyboardButton(
                        text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç",
                        callback_data=f"start_assigned_{task_id}"
                    ),
                    InlineKeyboardButton(
                        text="‚èπ –°—Ç–æ–ø",
                        callback_data=f"stop_assigned_{task_id}"
                    )
                ])
    
    if own_tasks:
        text += "\nüìù –õ–∏—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
        for task in own_tasks:
            task_id, name, description, created_at = task
            text += f"üìå {name}\n"
            text += f"üìù {description}\n\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç",
                    callback_data=f"start_task_{task_id}"
                ),
                InlineKeyboardButton(
                    text="‚èπ –°—Ç–æ–ø",
                    callback_data=f"stop_task_{task_id}"
                )
            ])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(text, reply_markup=markup) 