from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
from config import ADMIN_IDS
from database import Database
from keyboards.schedule_kb import (
    get_schedule_admin_kb,
    get_month_calendar,
    get_time_slots_kb,
    get_confirm_schedule_kb
)
from states.schedule_states import ScheduleStates

router = Router()
db = Database()

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
@router.message(lambda m: m.from_user.id in ADMIN_IDS and m.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
async def schedule_admin_panel(message: Message):
    try:
        print("–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º")  # –û—Ç–ª–∞–¥–∫–∞
        await message.answer(
            "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
            reply_markup=get_schedule_admin_kb()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ schedule_admin_panel: {e}")  # –û—Ç–ª–∞–¥–∫–∞
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@router.callback_query()
async def process_callback(callback: CallbackQuery, state: FSMContext):
    print(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")  # –û—Ç–ª–∞–¥–∫–∞
    
    try:
        if callback.data == "add_work_hours":
            await start_add_work_hours(callback, state)
        
        elif callback.data == "view_appointments":
            await view_appointments(callback)
        
        elif callback.data == "cancel_appointment":
            await start_cancel_appointment(callback, state)
        
        elif callback.data.startswith("cancel_slot_"):
            await cancel_specific_appointment(callback, state)
        
        elif callback.data.startswith("date_"):
            await process_selected_date(callback, state)
        
        elif callback.data.startswith("time_"):
            await process_selected_time(callback, state)
        
        elif callback.data == "confirm_schedule":
            await confirm_schedule(callback, state)
        
        elif callback.data == "cancel_schedule":
            await cancel_schedule(callback, state)
        
        elif callback.data == "back_to_schedule":
            await back_to_schedule(callback)
        
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback.data}")  # –û—Ç–ª–∞–¥–∫–∞
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_callback: {e}")  # –û—Ç–ª–∞–¥–∫–∞
        await callback.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def start_add_work_hours(callback: CallbackQuery, state: FSMContext):
    try:
        print("–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤")  # –û—Ç–ª–∞–¥–∫–∞
        await state.set_state(ScheduleStates.selecting_date)
        await callback.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤:",
            reply_markup=get_month_calendar()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start_add_work_hours: {e}")  # –û—Ç–ª–∞–¥–∫–∞
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await callback.answer()

async def view_appointments(callback: CallbackQuery):
    try:
        print("–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π")  # –û—Ç–ª–∞–¥–∫–∞
        await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π...")
        
        appointments = db.get_all_appointments()
        print(f"–ü–æ–ª—É—á–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {appointments}")  # –û—Ç–ª–∞–¥–∫–∞
        
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_schedule"
        ))
        
        if not appointments:
            await callback.message.edit_text(
                "üìÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏",
                reply_markup=kb.as_markup()
            )
            return
        
        text = "üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
        for app in appointments:
            text += (f"–î–∞—Ç–∞: {app['date']}\n"
                    f"–í—Ä–µ–º—è: {app['time']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {app['status']}\n"
                    f"------------------------\n")
        
        await callback.message.edit_text(text, reply_markup=kb.as_markup())
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ view_appointments: {e}")  # –û—Ç–ª–∞–¥–∫–∞
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π: {str(e)}",
            reply_markup=get_schedule_admin_kb()
        )
    finally:
        await callback.answer()

# –í—ã–±–æ—Ä –¥–∞—Ç—ã
@router.callback_query(lambda c: c.data.startswith("date_"))
async def process_selected_date(callback: CallbackQuery, state: FSMContext):
    try:
        date = callback.data.replace("date_", "")
        await state.update_data(selected_date=date)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        await callback.message.edit_text(
            f"üïí –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –Ω–∞ {date}:",
            reply_markup=get_time_slots_kb()
        )
        await state.set_state(ScheduleStates.selecting_hours)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    await callback.answer()

# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(lambda c: c.data.startswith("time_"))
async def process_selected_time(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        selected_slots = data.get("selected_slots", [])
        time_slot = callback.data.replace("time_", "")
        
        if time_slot in selected_slots:
            selected_slots.remove(time_slot)
        else:
            selected_slots.append(time_slot)
        
        await state.update_data(selected_slots=selected_slots)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        slots_text = "\n".join(sorted(selected_slots)) if selected_slots else "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"
        await callback.message.edit_text(
            f"üìÖ –î–∞—Ç–∞: {data['selected_date']}\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:\n{slots_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä:",
            reply_markup=get_time_slots_kb()
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
@router.callback_query(lambda c: c.data == "confirm_schedule")
async def confirm_schedule(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        date = data.get('selected_date')
        slots = data.get('selected_slots', [])
        
        if not slots:
            await callback.message.edit_text(
                "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞!",
                reply_markup=get_time_slots_kb()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç—ã –≤ –±–∞–∑—É
        for slot in slots:
            db.add_work_slot(date, slot)
        
        await callback.message.edit_text(
            f"‚úÖ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –Ω–∞ {date} –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n"
            f"{', '.join(sorted(slots))}",
            reply_markup=get_schedule_admin_kb()
        )
        await state.clear()
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
    await callback.answer()

# –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞
@router.callback_query(lambda c: c.data == "cancel_schedule")
async def cancel_schedule(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_schedule_admin_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@router.callback_query(lambda c: c.data == "back_to_schedule")
async def back_to_schedule(callback: CallbackQuery):
    try:
        try:
            await callback.message.edit_text(
                "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
                reply_markup=get_schedule_admin_kb()
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
                reply_markup=get_schedule_admin_kb()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ back_to_schedule: {e}")
        await callback.message.answer(
            "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
            reply_markup=get_schedule_admin_kb()
        )
    await callback.answer()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π
async def start_cancel_appointment(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        appointments = db.get_all_appointments()
        
        if not appointments:
            try:
                await callback.message.edit_text(
                    "üìÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                    reply_markup=get_schedule_admin_kb()
                )
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    "üìÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                    reply_markup=get_schedule_admin_kb()
                )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–ø–∏—Å—è–º–∏
        kb = InlineKeyboardBuilder()
        
        for app in appointments:
            date = datetime.strptime(app['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
            button_text = f"{date} {app['time']}"
            if app['status'] == 'booked':
                button_text += f" (–ó–∞–Ω—è—Ç–æ: ID {app['user_id']})"
            kb.add(InlineKeyboardButton(
                text=button_text,
                callback_data=f"cancel_slot_{app['date']}_{app['time']}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        kb.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_schedule"
        ))
        
        kb.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        
        try:
            await callback.message.edit_text(
                "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
                reply_markup=kb.as_markup()
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
                reply_markup=kb.as_markup()
            )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start_cancel_appointment: {e}")
        await callback.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_schedule_admin_kb()
        )
    finally:
        await callback.answer()

async def cancel_specific_appointment(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ callback_data
        _, date, time = callback.data.split('_', 2)
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
        db.cancel_appointment(date, time)
        
        await callback.message.edit_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ {date} {time} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_schedule_admin_kb()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ cancel_specific_appointment: {e}")
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {str(e)}",
            reply_markup=get_schedule_admin_kb()
        )
    finally:
        await callback.answer() 