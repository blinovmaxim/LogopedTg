import sys
import os
import asyncio
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from config import ADMIN_IDS
from keyboards.admin_kb import get_admin_keyboard
from keyboards.client_kb import get_main_keyboard
from database import Database
import json
from datetime import datetime
from aiogram.fsm.context import FSMContext
from states.admin_states import AdminStates

router = Router()
db = Database()

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def save_restart_status(status: str, error: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        status_data = {
            'status': status,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'error': error
        }
        
        with open('restart_status.json', 'w') as f:
            json.dump(status_data, f)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

def get_restart_status() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ"""
    try:
        with open('restart_status.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return None
# –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–æ—Å—Ç—É–ø
async def init_db():
    db.execute_query('''
    CREATE TABLE IF NOT EXISTS pending_users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        full_name TEXT,
        request_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
async def add_pending_user(bot: Bot, user_id: int, username: str = None, full_name: str = None):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
    db.execute_query(
        'INSERT OR REPLACE INTO pending_users (user_id, username, full_name) VALUES (?, ?, ?)',
        (user_id, username, full_name)
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    for admin_id in ADMIN_IDS:
        try:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É",
                            callback_data=f"view_request_{user_id}"
                        )
                    ]
                ]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot.send_message(
                admin_id,
                f"‚ùóÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username or '–±–µ–∑ username'}",
                reply_markup=keyboard
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot.send_message(
                admin_id,
                "‚ùóÔ∏è –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                disable_notification=False  # –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏
@router.callback_query(lambda c: c.data.startswith('view_request_'))
async def view_user_request(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return
        
    user_id = int(callback.data.split('_')[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = db.execute_query(
        'SELECT user_id, username, full_name, request_time FROM pending_users WHERE user_id = ?',
        (user_id,)
    ).fetchone()
    
    if user_info:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø",
                        callback_data=f"grant_{user_id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=f"deny_{user_id}"
                    )
                ]
            ]
        )
        
        await callback.message.edit_text(
            f"üë§ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø</b>\n\n"
            f"‚Ä¢ ID: <code>{user_info[0]}</code>\n"
            f"‚Ä¢ Username: @{user_info[1] or '–Ω–µ—Ç'}\n"
            f"‚Ä¢ –ò–º—è: {user_info[2] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {user_info[3]}\n\n"
            f"‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(lambda m: m.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and m.from_user.id in ADMIN_IDS)
async def admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    restart_status = get_restart_status()
    status_text = ""
    
    if restart_status:
        if restart_status['status'] == 'success':
            status_text = (
                "\n\n‚úÖ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {restart_status['timestamp']}"
            )
        elif restart_status['status'] == 'error':
            status_text = (
                "\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ\n"
                f"üïí –í—Ä–µ–º—è: {restart_status['timestamp']}\n"
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {restart_status['error']}"
            )
        elif restart_status['status'] == 'stopped':
            status_text = (
                "\n\n‚õîÔ∏è –ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
                f"üïí –í—Ä–µ–º—è: {restart_status['timestamp']}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {restart_status['error']}"
            )
    
    await message.answer(
        f"üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞{status_text}",
        reply_markup=get_admin_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
@router.message(lambda m: m.text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç" and m.from_user.id in ADMIN_IDS)
async def restart_bot(message: Message):
    if not is_admin(message.from_user.id):
        return
        
    try:
        await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        save_restart_status('restarting')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
        with open('restart_chat.txt', 'w') as f:
            f.write(str(message.chat.id))
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        os.execv(sys.executable, ['python'] + sys.argv)
        
    except Exception as e:
        save_restart_status('error', str(e))
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
@router.message(lambda m: m.text == "üìä –°—Ç–∞—Ç—É—Å" and m.from_user.id in ADMIN_IDS)
async def check_status(message: Message):
    if not is_admin(message.from_user.id):
        return
        
    restart_status = get_restart_status()
    if restart_status:
        status_text = (
            "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            f"‚ñ´Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if restart_status['status'] == 'success' else '‚ùå –û—à–∏–±–∫–∞'}\n"
            f"‚ñ´Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç: {restart_status['timestamp']}\n"
        )
        if restart_status.get('error'):
            status_text += f"‚ñ´Ô∏è –û—à–∏–±–∫–∞: {restart_status['error']}\n"
    else:
        status_text = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    await message.answer(status_text, reply_markup=get_admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    user_id = message.from_user.id
    if is_admin(user_id):
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_main_keyboard(user_id)
        )
    else:
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard(user_id)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(lambda m: m.text in ["üîÑ –†–µ—Å—Ç–∞—Ä—Ç", "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"] and m.from_user.id not in ADMIN_IDS)
async def unauthorized_admin_access(message: Message):
    await message.answer(
        "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞
@router.message(lambda m: m.text.startswith('/grant_access'))
async def grant_access(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id = int(message.text.split()[1])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if db.add_allowed_user(user_id, message.from_user.id):
            await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞")
            
    except (IndexError, ValueError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /grant_access USER_ID"
        )

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞
@router.message(lambda m: m.text.startswith('/revoke_access'))
async def revoke_access(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id = int(message.text.split()[1])
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if db.remove_allowed_user(user_id):
            await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –¥–æ—Å—Ç—É–ø–∞")
            
    except (IndexError, ValueError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /revoke_access USER_ID"
        )

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
@router.message(lambda m: m.text == '/list_access')
async def list_access(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    users = db.get_allowed_users()
    if users:
        text = "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º:\n\n"
        for user_id in users:
            text += f"‚Ä¢ {user_id}\n"
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –ø—É—Å—Ç"
    
    await message.answer(text)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –¥–æ—Å—Ç—É–ø–∞
@router.message(lambda m: m.text == '/access_help')
async def access_help(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    help_text = (
        "üìù –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º:\n\n"
        "/grant_access USER_ID - –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø\n"
        "/revoke_access USER_ID - –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø\n"
        "/list_access - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º\n"
        "/access_help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–∂–∏–¥–∞—é—Ç –¥–æ—Å—Ç—É–ø" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(lambda m: m.text == "üë• –û–∂–∏–¥–∞—é—Ç –¥–æ—Å—Ç—É–ø" and m.from_user.id in ADMIN_IDS)
async def show_pending_users(message: Message):
    if not is_admin(message.from_user.id):
        return
        
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
    pending = db.execute_query(
        'SELECT user_id, username, full_name, request_time FROM pending_users'
    ).fetchall()
    
    if not pending:
        await message.answer(
            "üìù –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–æ—Å—Ç—É–ø",
            reply_markup=get_admin_keyboard()
        )
        return
        
    text = "üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –¥–æ—Å—Ç—É–ø:\n\n"
    for user in pending:
        text += (
            f"üë§ ID: {user[0]}\n"
            f"Username: @{user[1]}\n"
            f"–ò–º—è: {user[2]}\n"
            f"–ó–∞–ø—Ä–æ—Å –æ—Ç: {user[3]}\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        )
        
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤—Å–µ–º",
                    callback_data="grant_all"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å–µ—Ö",
                    callback_data="deny_all"
                )
            ]
        ]
    )
    
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda c: c.data.startswith(("grant_", "deny_")))
async def process_access_action(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return
        
    action, user_id = callback.data.split('_')
    bot = callback.bot
    
    if user_id == "all":
        if action == "grant":
            # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º –æ–∂–∏–¥–∞—é—â–∏–º
            pending = db.execute_query('SELECT user_id FROM pending_users').fetchall()
            for user in pending:
                db.add_allowed_user(user[0])
                try:
                    await bot.send_message(
                        user[0],
                        "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."
                    )
                except:
                    pass
            db.execute_query('DELETE FROM pending_users')
            await callback.message.edit_text("‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        else:
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ—Ö
            pending = db.execute_query('SELECT user_id FROM pending_users').fetchall()
            for user in pending:
                try:
                    await bot.send_message(
                        user[0],
                        "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω."
                    )
                except:
                    pass
            db.execute_query('DELETE FROM pending_users')
            await callback.message.edit_text("‚ùå –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
    else:
        user_id = int(user_id)
        if action == "grant":
            db.add_allowed_user(user_id)
            try:
                await bot.send_message(
                    user_id,
                    "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."
                )
            except:
                pass
            db.execute_query('DELETE FROM pending_users WHERE user_id = ?', (user_id,))
            await callback.message.edit_text(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            try:
                await bot.send_message(
                    user_id,
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω."
                )
            except:
                pass
            db.execute_query('DELETE FROM pending_users WHERE user_id = ?', (user_id,))
            await callback.message.edit_text(f"‚ùå –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω") 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@router.message(Command("admin"))
async def admin_command(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    await message.answer(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
@router.message(lambda m: m.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" and m.from_user.id in ADMIN_IDS)
async def users_menu(message: types.Message):
    if not is_admin(message.from_user.id):
        return
        
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    allowed_users = db.execute_query('''
        SELECT au.user_id, au.added_at, au.added_by 
        FROM allowed_users au
        ORDER BY au.added_at DESC
    ''').fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
    pending_users = db.get_pending_users()
    
    text = "<b>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
    if allowed_users:
        text += "<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º:</b>\n"
        for user in allowed_users:
            user_id, added_at, added_by = user
            text += f"‚Ä¢ ID: {user_id} | –î–æ–±–∞–≤–ª–µ–Ω: {added_at[:16]}\n"
    else:
        text += "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º\n"
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
    for user in allowed_users:
        user_id = user[0]
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {user_id}",
                callback_data=f"remove_user:{user_id}"
            )
        ])
    
    # –°–ø–∏—Å–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–æ—Å—Ç—É–ø
    if pending_users:
        text += "\n<b>‚è≥ –û–∂–∏–¥–∞—é—Ç –¥–æ—Å—Ç—É–ø–∞:</b>\n"
        for user in pending_users:
            user_id, username, full_name, req_time = user
            text += (
                f"‚Ä¢ ID: {user_id}\n"
                f"  ‚îî –ò–º—è: {full_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"  ‚îî @{username or '–Ω–µ—Ç username'}\n"
                f"  ‚îî –ó–∞–ø—Ä–æ—Å: {req_time[:16]}\n"
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∂–∏–¥–∞—é—â–µ–≥–æ
            keyboard.append([
                types.InlineKeyboardButton(
                    text=f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {user_id}",
                    callback_data=f"approve_user:{user_id}"
                ),
                types.InlineKeyboardButton(
                    text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"deny_user:{user_id}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard.append([
            types.InlineKeyboardButton(
                text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ—Ö",
                callback_data="approve_all"
            ),
            types.InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å–µ—Ö",
                callback_data="deny_all"
            )
        ])
    else:
        text += "\n‚è≥ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–æ—Å—Ç—É–ø–∞"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard.append([
        types.InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            callback_data="add_user"
        )
    ])
    
    keyboard.append([
        types.InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
            callback_data="refresh_users"
        )
    ])
    
    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(text, reply_markup=markup, parse_mode="HTML")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data.startswith('approve_user:'))
async def approve_single_user(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return
    
    try:
        _, user_id = callback.data.split(':')
        user_id = int(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if db.add_allowed_user(user_id, callback.from_user.id):
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
            db.remove_pending_user(user_id)
            
            try:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await callback.bot.send_message(
                    user_id,
                    "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–¥–æ–±—Ä–µ–Ω!"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω")
            await users_menu(callback.message)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(lambda c: c.data.startswith('deny_user:'))
async def deny_single_user(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return
    
    try:
        _, user_id = callback.data.split(':')
        user_id = int(user_id)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
        if db.remove_pending_user(user_id):
            try:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await callback.bot.send_message(
                    user_id,
                    "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫–ª–æ–Ω–µ–Ω."
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            await users_menu(callback.message)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(lambda c: c.data == "refresh_users")
async def refresh_users_list(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return
    
    await callback.answer("üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
    await users_menu(callback.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data in ["approve_all", "deny_all"])
async def process_users(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return
    
    action = callback.data
    bot = callback.bot
    
    if action == "approve_all":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        pending_users = db.execute_query('SELECT user_id FROM pending_users').fetchall()
        
        # –û–¥–æ–±—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user in pending_users:
            user_id = user[0]
            db.add_allowed_user(user_id)
            try:
                await bot.send_message(
                    user_id,
                    "‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞."
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
        db.execute_query('DELETE FROM pending_users')
        
        await callback.message.edit_text(
            f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ {len(pending_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
    
    elif action == "deny_all":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        pending_users = db.execute_query('SELECT user_id FROM pending_users').fetchall()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–∞–∑–µ
        for user in pending_users:
            try:
                await bot.send_message(
                    user[0],
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω."
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
        db.execute_query('DELETE FROM pending_users')
        
        await callback.message.edit_text(
            f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ {len(pending_users)} –∑–∞–ø—Ä–æ—Å–æ–≤"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.message(Command("grant"))
async def grant_access(message: Message):
    if not is_admin(message.from_user.id):
        return
    
    args = message.text.split()
    if len(args) != 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /grant USER_ID"
        )
        return
    
    try:
        user_id = int(args[1])
        db.add_allowed_user(user_id)
        db.execute_query('DELETE FROM pending_users WHERE user_id = ?', (user_id,))
        
        try:
            await message.bot.send_message(
                user_id,
                "‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}") 

@router.callback_query(lambda c: c.data.startswith('remove_user:'))
async def remove_user_access(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_data
        user_id = int(callback.data.split(':')[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        if db.is_user_allowed(user_id):
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if db.remove_allowed_user(user_id):
                try:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞
                    await callback.bot.send_message(
                        user_id,
                        "‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await users_menu(callback.message)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        else:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            await users_menu(callback.message)
            
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è user_id: {e}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏") 

@router.callback_query(lambda c: c.data == "add_user")
async def add_user_prompt(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return
    
    keyboard = [
        [
            types.InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_add_user"
            )
        ]
    ]
    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚ùóÔ∏è Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @\n\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: @test_user</i>",
        reply_markup=markup,
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_username)
    await callback.answer()

@router.message(AdminStates.waiting_for_username)
async def process_username(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await state.clear()
        return
    
    username = message.text.strip()
    
    if not username.startswith('@'):
        await message.answer(
            "‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã"
        )
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_add:{username}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_add_user"
                )
            ]
        ]
        markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await message.answer(
            f"üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}?",
            reply_markup=markup
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await state.clear()

@router.callback_query(lambda c: c.data.startswith('confirm_add:'))
async def confirm_add_user(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return
    
    username = callback.data.split(':')[1]
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º username –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if db.add_allowed_username(username):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
            pending_users = db.get_pending_users()
            user_id = None
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username —Å—Ä–µ–¥–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö
            for pending_user in pending_users:
                if f"@{pending_user[1]}" == username:  # pending_user[1] - —ç—Ç–æ username
                    user_id = pending_user[0]  # pending_user[0] - —ç—Ç–æ user_id
                    break
            
            if user_id:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.bot.send_message(
                        user_id,
                        "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            
            await callback.message.edit_text(
                f"‚úÖ Username {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö!\n"
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–æ—Ç—É."
            )
            
            await users_menu(callback.message)
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    finally:
        await state.clear()

@router.callback_query(lambda c: c.data == "cancel_add_user")
async def cancel_add_user(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer() 

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda c: c.data == "open_users_panel")
async def open_users_panel(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return
    
    await users_menu(callback.message)
    await callback.answer() 

@router.callback_query(lambda c: c.data.startswith('grant_'))
async def process_grant_access(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return
    
    try:
        user_id = int(callback.data.split('_')[1])
        
        if db.add_allowed_user(user_id, callback.from_user.id):
            try:
                await callback.bot.send_message(
                    user_id,
                    "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            db.remove_pending_user(user_id)
            await callback.message.edit_text(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞")
            
    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}") 