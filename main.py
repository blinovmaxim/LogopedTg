import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN, ADMIN_IDS
from handlers import admin, client, exercises, schedule, access, tasks
from aiogram.types import BotCommand
from handlers.access import access_middleware
import socket
import sys
import json
from datetime import datetime
import os
import signal
from database import Database

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
dp.include_router(access.router)
dp.include_router(admin.router)  # –°–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä
dp.include_router(client.router)
dp.include_router(exercises.router)
dp.include_router(schedule.router)
dp.include_router(tasks.router)

async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å")
    ]
    await bot.set_my_commands(commands)


def cleanup_socket():
    """–û—á–∏—â–∞–µ–º —Å–æ–∫–µ—Ç –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    try:
        os.remove("bot_lock.sock")
    except FileNotFoundError:
        pass

def is_bot_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω—è—Ç—å –ø–æ—Ä—Ç. –ï—Å–ª–∏ –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç - –∑–Ω–∞—á–∏—Ç –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.bind(('localhost', 47200))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
        return False
    except socket.error:
        return True
    finally:
        sock.close()

async def shutdown(dispatcher: Dispatcher, bot: Bot):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    print('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...')
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    [task.cancel() for task in tasks]
    await asyncio.gather(*tasks, return_exceptions=True)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    await bot.session.close()
    
    # –û—á–∏—â–∞–µ–º —Å–æ–∫–µ—Ç
    cleanup_socket()
    
    print('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print(f'–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}')
    cleanup_socket()
    sys.exit(0)




# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
class AccessMiddleware:
    async def __call__(self, handler, event, data):
        if isinstance(event, types.Message):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            if event.text and event.text.startswith(('üéØ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è', '/exercise')):
                if not await access_middleware(event, data['bot']):
                    return
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        elif isinstance(event, types.CallbackQuery):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            if event.data and event.data.startswith(('ex_', 'video:')):
                if not await access_middleware(event.message, data['bot']):
                    await event.answer("‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", show_alert=True)
                    return
        return await handler(event, data)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
dp.message.middleware(AccessMiddleware())

def save_restart_status(status: str, error: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–∞–π–ª"""
    data = {
        'status': status,
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'error': error
    }
    with open('restart_status.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False)

async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ —Ä–µ—Å—Ç–∞—Ä—Ç
        if os.path.exists('restart_chat.txt'):
            with open('restart_chat.txt', 'r') as f:
                chat_id = int(f.read().strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot.send_message(
                chat_id,
                "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!"
            )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            os.remove('restart_chat.txt')
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        save_restart_status('success')
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Å—Ç–∞—Ä—Ç–µ: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º on_startup –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp.startup.register(on_startup)

async def main():
    try:
        # –û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
        save_restart_status('success')
        
        await set_commands(bot)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        db = Database()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        await bot.delete_webhook(drop_pending_updates=True)
        
        await dp.start_polling(bot)
    except Exception as e:
        save_restart_status('error', str(e))
        print(f'–û—à–∏–±–∫–∞: {e}')
    finally:
        await bot.session.close()

if __name__ == '__main__':
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    if is_bot_running():
        print("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä.")
        sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO)
    

    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    except KeyboardInterrupt:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏ Ctrl+C
        print('\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ')
        asyncio.run(shutdown(dp, bot))
    except Exception as e:
        print(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}')
        asyncio.run(shutdown(dp, bot))
    finally:
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—á–∏—â–∞–µ–º —Å–æ–∫–µ—Ç
        cleanup_socket()


